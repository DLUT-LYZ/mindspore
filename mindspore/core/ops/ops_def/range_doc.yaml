range:
    description: |
        Creates a sequence of numbers that begins at `start` and extends by increments of
        `limit` up to but not including `end`.

            The types of all 3 inputs must be the same. The type of the resulting tensor is
            the same as the type of the inputs.

            Args:
                start (number): A scalar Tensor. The first number in the sequence. Must have
                  type: int32 ,int64, float32 or float64.
                end (number): A scalar Tensor. Upper limit of the sequence, exclusive. Must
                  have type: int32 ,int64, float32 or float64.
                step (number): A scalar Tensor. Number that increments `start`. Must have
                  type: int32 ,int64, float32 or float64.
                maxlen (int, optional): Memory that can fit `maxlen` many elements
                  will be allocated for the output. Optional, must be positive. Default: 1000000.
                  If the output has more than `maxlen` elements, a runtime error will occur.

            Returns:
                A 1-D Tensor, with the same type as the inputs.

            Raises:
                TypeError: If `start`, `end` or `step` is not scalar Tensor.
                TypeError: If datatype of `start`, `end` or `step` is not same.
                TypeError: If datatype of `start`, `end` or `step` is not supported.
                ValueError: If `step` = 0.
                ValueError: If `start` >= `end` when `step` > 0.
                ValueError: If `start` <= `end` when `step` < 0.

            Supported Platforms:
                ``GPU`` ``CPU``

            Examples:
                >>> from mindspore import Tensor, ops
                >>> from mindspore import dtype as mstype
                >>> start = 0
                >>> end = 10
                >>> step = 4
                >>> output = ops.range(start, end, step)
                >>> print(output)
                [0 4 8]
